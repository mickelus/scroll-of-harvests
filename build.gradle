import groovy.json.JsonSlurper
import groovy.json.JsonException
import groovy.json.JsonOutput

buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

if (System.getenv('VERSION') != null) {
    harvests_version = System.getenv('VERSION')
}

version = "${mc_version}-${harvests_version}"
group = 'se.mickelus.harvests'
archivesBaseName = "harvests"

repositories {
    mavenLocal()
    maven { url = "https://maven.theillusivec4.top/" }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.18.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', '' //'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                harvests {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                harvests {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'harvests', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                harvests {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache', 'temp'
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("se.mickelus.mutil:mutil:${mutil_version}")
//    implementation fg.deobf("se.mickelus.tetra:tetra:${tetra_version}")

//    runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

//    compile fg.deobf("curse.maven:apotheosis:2906078")
//    compile fg.deobf("curse.maven:apotheosis-placebo:2870411")
//
//    compile fg.deobf("curse.maven:cyclic:2934819")
//
//    compile fg.deobf("curse.maven:naturesaura:2920340")
//    compile fg.deobf("curse.maven:naturesaura-patchouli:2925865")
//
//    compile fg.deobf("curse.maven:ensorcellation:2935190")
//    compile fg.deobf("curse.maven:ensorcellation-cofh_core:2935185")
//
//    compile fg.deobf("curse.maven:enchantable:2931023")
//
//    compile fg.deobf("curse.maven:bluepower:2934396")
//
//    compile fg.deobf("curse.maven:ma_enchants:2931675")
//
//    compile fg.deobf("curse.maven:cursed:2913022")
//    compile fg.deobf("curse.maven:cursed-bookshelf:2935828")
}

jar {
    manifest {
        attributes([
                "Specification-Title": "harvests",
                "Specification-Vendor": "mickelus",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${harvests_version}",
                "Implementation-Vendor" :"harvests",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

processResources {
    doLast {

        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0

        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

            File file = it
            jsonMinified++
            def oldLength = file.length()
            try {
                file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            } catch(JsonException e) {
                throw new JsonException("Failed to parse json in " + file.path)
            }
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }

        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}
